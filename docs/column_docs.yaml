columns:
  - name: Random
    title: Generates columns of random data
    desc: |+
      A Random column
    examples:
      - title: Random Ints
        desc: A Random column generates random values between `min:` and `max:`.
        column_yaml: |
          name: simple_random_int
          column_type: Random
          data_type: Int
          min: 5
          max: 200

      - title: Random Timestamps
        desc: You can generate random timestamps as well.
        column_yaml: |
          name: event_time
          column_type: Random
          data_type: Timestamp
          min: 2022-01-01
          max: 2022-01-02 12:00:00
      
      - title: Random Strings
        desc: Or random strings, where min and max are the length of the string.
        column_yaml: |
          name: message_id
          column_type: Random
          data_type: String
          min: 4
          max: 12
     
  - name: Selection
    title: Generates columns by selecting random values
    desc: >
      A selection column
    examples:
      - title: Simple Selection
        desc: A simple Selection column fills a column with a random selection from the provided `values`.
        column_yaml: |
          name: simple_selection
          column_type: Selection
          values: 
            - first
            - second

      - title: Selection with Weighting
        desc: You can apply weighting to the provided `values` to make some more likely to be selected. In this example USD is 10 times more likely than GBP and EUR is 3 times more likely than GBP. A specific weighting is not needed for GBP since it defaults to 1.
        column_yaml: |
          name: weighted_selection
          column_type: Selection
          values: 
            - USD
            - EUR
            - GBP
          weights:
            - 10
            - 3

  - name: Sequential
    title: Generates a column by incrementing a field from a `start:` by a `step:` for each row.
    examples:
      - title: Sequential Ints
        desc: A simple Sequential column can be used for generating incrementing Ids.
        column_yaml: |
          name: id
          column_type: Sequential
          data_type: Int
          start: 1
          step: 1
      - title: Sequential Timestamps
        desc: They can also be used for timestamps and can be written in the following concise syntax.
        column_yaml: |
          col: event_time Sequential Timestamp "1999-12-31 23:56:29" 1min45S

  - name: MapValues
    title: Maps the values in one column to values in another
    examples:
      - title: A Simple MapValues
        desc: A simple mapping
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: currency Selection String
              values:
                - EUR
                - USD
                - GBP
            - name: symbol
              column_type: MapValues
              source_column: currency
              values:
                EUR: €
                USD: $
                GBP: £
      - title: Mapping a subset of values
        desc: Any values not specified in the mapping are left empty / null 
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: currency Selection String
              values:
                - EUR
                - USD
                - GBP
            - name: symbol
              column_type: MapValues
              source_column: currency
              data_type: String
              values:
                EUR: €
      - title: MapValues with Default
        desc: You can provide a default value to fill any gaps 
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: currency Selection String
              values:
                - EUR
                - USD
                - GBP
            - name: symbol
              column_type: MapValues
              source_column: currency
              data_type: String
              values:
                EUR: €
              default: "n/a"

  - name: Series
    title: Repeats a series of values to fill a column
    examples:
      - title: Simple Series
        desc: A simple series
        column_yaml: |
          name: group
          column_type: Series
          values:
            - A
            - B

  - name: Fixed
    title: Generates a column with a single fixed value
    examples:
      - title: A Fixed String
        desc: A fixed string
        column_yaml: |
          name: currency
          column_type: Fixed
          value: BTC

  - name: Empty
    title: Generates and empty (null) column of data
    examples:
      - title: An Empty Float
        desc: A simple empty column
        column_yaml: |
          name: pending_balance
          column_type: Empty
          data_type: Float

  - name: Map
    title: Map columns create a record style field from other fields
    examples:
      - title: A Simple Map
        desc: You can create a Map field by specifing sub `columns:`. Note that the intermediate format here is a python dict and so it renders with single quotes.
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: mymap Map
              columns:
                - col: id Random Int 100 300
                - col: name Random String 2 5
      
      - title: Map with Json Output
        desc: "If you want a valid json field specify `data_type: String`."
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: mymap Map
              data_type: String
              columns:
                - col: id Random Int 100 300
                - col: name Random String 2 5
      
      - title: Nested Map
        desc: "Similarly you can nest to any depth by adding Map columns within Map columns."
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: mymap Map
              data_type: String
              columns:
                - col: id Random Int 100 300
                - col: nestedmap Map
                  columns:
                    - col: balance Sequential Float 5.4 1.15
                    - col: status Selection String
                      values:
                        - active
                        - inactive
      
      - title: "Usage of `select_one:`"
        desc: "Specifying `select_one: True`, picks one field and masks all the others."
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: mymap Map String
              select_one: True
              columns:
                - col: id Random Int 100 300
                - col: name Random String 3 6
                - col: status Selection
                  values:
                    - Y
                    - N

          
  - name: Array
    title: Builds an array from the specified `source_columns:`.
    examples:
      - title: Simple Array with primitive types
        desc: A simple array of primitive types
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: int1 Random Int 20 50
            - col: int2 Random Int 50 90
            - name: array_col
              column_type: Array
              source_columns: [int1, int2]

      - title: "Use of `drop: False`"
        desc: "The source columns are removed by default but you can leave them with `drop: False`"
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: int1 Random Int 20 50
            - col: int2 Random Int 50 90
            - name: array_col
              drop: False
              column_type: Array
              source_columns: [int1, int2]
      
      - title: "With nulls in `source_columns:`"
        desc: "Nulls in the source_columns are included in the array by default"
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: int1 Random Int 20 50
            - col: int2 Random Int 50 90
              null_percentage: 90
            - name: array_col
              drop: False
              column_type: Array
              source_columns: [int1, int2]
      
      - title: "Use of `drop_nulls: True`"
        desc: "Add `drop_nulls: True` to remove them from the array"
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: int1 Random Int 20 50
            - col: int2 Random Int 50 90
              null_percentage: 90
            - name: array_col
              drop: False
              drop_nulls: True
              column_type: Array
              source_columns: [int1, int2]
      
      - title: "Outputting a Json array"
        desc: "You can get a Json formatted string using data_type: String"
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: int1 Random Int 20 50
            - col: int2 Empty Int
            - col: str1 Fixed String foo
            - name: array_col
              data_type: String
              column_type: Array
              source_columns: [int1, int2, str1]
          
  - name: ExtractDate
    title: "Extracts a date from a timestamp `source_column:`"
    examples:
      - title: Simple ExtractDate
        desc: You may want to use a timestamp column to populate another column. For example populating a `dt` column with the date. The ExtractDate column provides an easy way to do this.
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: event_time Random Timestamp 2022-02-02 2022-04-01
            - name: dt
              column_type: ExtractDate
              data_type: Date
              source_column: event_time
      
      - title: ExtractDate with custom formatting
        desc: You can also extract the date as a string and control the formatting
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: event_time Random Timestamp 2022-02-02 2022-04-01
            - name: day_of_month
              column_type: ExtractDate
              data_type: String
              date_format: "A %A in %B"
              source_column: event_time
      
      - title: ExtractDate to an Int
        desc: Or extract part of the date as an integer
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: event_time Random Timestamp 2000-01-01 2010-12-31
            - name: year
              column_type: ExtractDate
              data_type: Int
              date_format: "%Y"
              source_column: event_time
      
  - name: TimestampOffset
    title: TimestampOffset produces a Timestamp column by adding some timedelta onto an existing timestamp column.
    examples:
      - title: Simple TimestampOffset
        desc: This example shows adding a random timedelta onto a timestamp field
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: game_id Random Int 2 8
            - col: game_start Random Timestamp 2022-02-02 2022-04-01
            - name: game_end
              column_type: TimestampOffset
              source_column: game_start
              min: 1min30s
              max: 25min

      - title: Fixed TimestampOffset
        desc: If you want a fixed offset from the source timestamp you can set min and max to the same value
        columns_yaml: |
          name: mytbl
          rows: 5
          columns:
            - col: promo_id Sequential Int 100 1
            - col: promo_start Sequential Timestamp 2022-02-02T12:00:00 1min15s
            - name: promo_end
              column_type: TimestampOffset
              source_column: promo_start
              min: 1min15s
              max: 1min15s

  # - name: Eval
  #   title: